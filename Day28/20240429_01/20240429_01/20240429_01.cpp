// 20240429_01.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
using namespace std;

// 부동소수점 오차를 잡아주는 범위
// 프로그래밍에서 float에서 이정도 오차는 같은 수라고 봐주겠다 << 라고 하는 범위.
#define EPSILON 1e-6f // ( == 0.000001)

int main()
{
    // 부동소수점
    int a = 1;
    int b = 2;
    bool c = a + b == 3;
    cout << c << endl;

    float d = 0.1;
    float  e = 0.2;
    // 이게 안되는 이유.. 면접 때에 설명할 수 있어야 함.
    bool f = d + e == 0.3; // 이게 false라는 것이 핵심

    bool f = abs(0.3 - (d + e)) <= EPSILON;
    // f를 붙이면 true가 됨.
    cout << d + e << endl; // 0.3
    cout << f << endl; // 0

    // 실수의 원리
    // float은 4byte
    // 어떻게 활용할거냐에 따라 범위가 달라진다.
    // 1비트 -> 양수 음수
    // 처음에 정수를 쭉 넣음.
    // N비트 -> 정수를 표현하는데 쓰임.
    // 나머지비트 -> 소수점을 표현하는 데 사용
    // 부동소수점 : 실수를 컴퓨터상에서 근사하여 표현할 때 소수점의 위치를 고정하지 않고 그 위치를 나타내는 수를 따로 적기 때문에 완벽하게 0.0000으로 떨어지지 않음
    // 0.5를 표현할 때
    // 0.5 -> 2의 -1 제곱 
    // 0.25 -> 2의 -2 제곱
    // 0.75 -> 2의 -1 제곱 + 2의 -2 제곱
    // 0.1 -> 2의 보수가 아님
    //          0.00001
    


    // 1 -> 2의 0제곱 
    // 2 -> 2의 1제곱
    // 3 -> 2의 0제곱 + 2의 1제곱
    // 4 -> 2의 2제곱
    // 5 -> 2의 2제곱 + 2의 0제곱
    // int는 4byte (1바이트 == 8비트) (32비트)
    
    // int의 범위 (1비트 -> 양수냐 음수냐)
    // -21억 ~ 21억 << 2의 31제곱 --> 21억



}