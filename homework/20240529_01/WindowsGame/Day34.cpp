#include "pch.h"

void Comment1()
{
	// 1. 숙제 풀이
	//  - 버튼누르면 씬이동

	// 2. Layer 

}


void Comment2()
{
	// Layer란?
	//  - Item이 장애물 뒤에 나오게 되면, 이상하게 보일 겁니다.
	// 이런 것들을 Layer로 정해주고
	//	이 요소들은 항상 얘 앞에, 항상 얘 뒤에 그린다.
	//	이런 것들을 정해주는게 Layer입니다.

	// 비슷한 애들끼리 모아서 그 친구들끼리 무언가를 해주는게 Layer구나
}

void Comment3()
{
	//여태까지 배운 layer 개념은
	// 통상적으로 쓰이는 layer.
	// 디자이너도 이렇게부르고, 기획자도  

	// 게임 프로그래머
	//  - [Collision Layer]

	// Collision Layer
	//  - 게임 프로그래밍에서 최적화를 해야한다면, [충돌체크]
	//  - 충돌체크가 매프레임( 1초에 최소 144번 )
	//  - 그 계산로직이 생각보다 복잡함. (폴리곤, 3D Collider) 
	//   - 그 양이 총알이 100개있다고 치고, 몬스터가 30마리 있다고치면 (탄막 슈팅게임에서)
	//   - 총 130개의 오브젝트 130*130 번 만큼 그 Collider Check 로직을 돌리게됩니다.
	//   - 대충 10000번을 1초에 144번
	//   - 저 충돌로직을 개선할수있는 방법은 없습니다.
	//     - (이미 수학자들이 잘해서 만들어논거라)
	//   - [충돌 횟수를 줄이는 것]
	//   - 충돌체크가 제일 비용을 크게 먹는데,
	//    - 충돌체크로직을 개선할수없으면, 할수있는것은 충돌체크 횟수를 줄이는것이다.
	// 
	// 
	// 
	// 
	// 
	// 게임 프로그래밍이 난인도가 제일 높다고 하거든요.
	//  [144FPS = > 1프레임에 허락된 시간 10ms도 안됩니다.]
	//   - 철권같이 조작키를 많이 타는데도, 1프레임이 튀면, 유저가 떠납니다.




	// 충돌체크를 줄인다는것은 무슨소리일까??
	// 
	// ex. 탄막슈팅게임
	//  총알끼리 충돌체크를 하는것이 의미가 있을까? (X)
	//  총알 <-> Character 랑만 충돌체크를하면 될것같습니다.

	// 총알 : 100개
	// 캐릭터 : 30개

	// 130 * 130 번의 충돌체크가 아니라
	// 100 * 30 => 

	// Collision Layer 
	//  ==> 최적화의 일종이다.

}


void Comment4()
{
	// 비트연산자
	// 비트연산에 대하여
}