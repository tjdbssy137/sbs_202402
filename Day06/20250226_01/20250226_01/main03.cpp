#include <iostream>
using namespace std;
void main()
{
	int num1 = 0;
	//...
	int num10 = 0;

	// 배열 문법
	// 자료형 변수명[크기] = {};
	// {}는 다른 애매한 것들에게도 다 통한다.
	// {} - 비어있는 값으로 초기화 한다.
	int num[10] = {}; //num[0] ~ num[9]까지 생성
	num[0] = 1;
	num[1] = 2;
	num[2] = 3;

	for (int i = 0; i < 10; i++)
	{
		num[i] = i + 1;
	}

	for (int i = 0; i < 10; i++)
	{
		cout << "num[" << i << "] = " << num[i] << endl;
	}
	//num[0] = 1; num[9] = 10;
	//프로그래밍은 대부분 0부터 시작.

	// enum + switch문
	// array + 반복문

	int arr[1000] = {};
	// 초기화 하고
	// arr[0] = 2,
	// arr[1] = 4,
	// arr[2] = 6,
	// arr[3] = 8,
	// 0~999인덱스까지 출력

	cout << endl;
	//초기화
	for (int i = 0; i < 1000; i++)
	{
		arr[i] = (i + 1) * 2;
	}

	//출력
	for (int i = 0; i < 1000; i++)
	{
		cout << "arr[" << i << "] = " << arr[i] << endl;
	}

	//배열을 다룰 때는 기능 단위로 반복문을 계속 써주는 것이 좋음.
	//why?
	//기능 단위로 함수를 만들게 됨.
	// 캐릭터를 움직입니다
	// Move라는 함수로 기능 단위로 움직이게 됩니다

	//반복문
	//{
	// InutArray(); PrintArray();
	// }

	//배열에서 해주는 역할들을 함수로 만들게 되면
	//InutArray();
	//PrintArray();
	//를 하나만 실행할 수 없음.

	// 함수는 항상 쪼갤수록 좋다.
	// 코드를 말로 바꾸는 행위이다.
	// for문 두 번 들어가는데 1000번짜리를 두 번 돌리면?
	// 성능이슈(퍼포먼스 이슈) 생기는 거 아님?
	// 절대 안 생긴다
	// - 실제로 퍼포먼스 이슈가 생겨서 코드를 수정해야하는 그 단계까지 꼭 가보기.
	// - 학생일 때.
	// - 요즘 같이 컴퓨터 서능 좋을 때, 그래픽 리소스 빼고, 순수 코드로만 퍼포먼스 이슈 나오기 힘듦.

	// 퍼포먼스 생각하다가 코딩을 못하 게 됨

	// 코드 리뷰
	// -> 남의 코드를 보고 이런 식으로 짰으면 더 좋지 않을까? 하는 탁상곤론 자리
	// 주로 코드를 라이브(테스트섭 말고 실제로 운행 중인)에 보낼 때 주로 함.
	// 자기가 생각하고 짠 코드랑 생각 안하고 이렇게 해야할 거 같았다는 코드랑 똑같은 내용이어도 방식에 따라 처용치가 달라진다.
	// => 코드마다 개인의 철학이 들어있다.
}