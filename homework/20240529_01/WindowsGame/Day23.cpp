

void Comment1()
{
	// 오늘 수업할거

	// 1. 벽돌깨기 저번에 다못한거 마무리하겠습니다.
	// 
	// 2. 리소스매니저 -> 이미지 붙일수 있도록 작업
	//		수요일까지 진행
}

void Comment2()
{
	// 벽돌깨기를 다 완성을 못했다면
	// 로직이 어려워서 못했을가능성은 되게 낮아요

	// 빙고보다 쉽습니다.
	// 로직자체는 남은게 
	// 1. 벽돌생성해준다. 
	// 2. 벽돌과 볼이 부딪히면 벽돌이 사라진다.


	// 로직이 어려워서 못했다 (X)
	// -> 프레임워크를 어떻게 활용해야하는지.
	//		내 생각을 어떻게 코드로 옮겨야하는지
	//		이게 안되어서 못하신분들이 많을거에요.


	//BrickActor 벽돌액터
	// 를 만들어주는게 가장 중요.
}

void Comment3()
{
	


	// 개발하다보면
	// 함수로 안되어있는 내용을 복사할일도생기고
	// 아니면 if땜질로 되게끔 만드는 경우도 있습니다.

	// 정답일수도있어요.
	// 기본적으로 프로그래밍은 정상적으로 돌아가기만하면 다 정답입니다.
	// 그 이후로 어떻게 유지보수할때 잘할수있냐 << 이거를 그다음에 고민하는거에요.

	// 계속 생각하면서 코드짜다보면 누구나 언젠간 할수있게돼요.

	// 함수로할건지, if땜질로할건지, 아니면 다른방법으로 할건지에 대해서는

	// 함수를 사용하는 이유 
	//  - 1. 가독성
	//  - 2. 재활용성 ( 유지보수 )

	// 기획이 다이나믹하게 바뀌었을때를 상상하면 좀 정답이 나옵니다.
	// 어떻게 짜둔 코드가 더 쉽게 변경할수있을까
	// 저희가 코드를 혼자 짜는게 아니에요
	//  -> 수정을 혼자하는게아니에요.
	//   -> 처음 누군가가 저렇게 if(A || B)
	//     --> 다음번에 내가 아닌 누군가가 if (A || B || C) 
	// 그리고 그 if문 안에서 점점 기괴한짓이 일어납니다.

	// 최대한 if문은 한글로 읽을수있게 만들어주는게 좋아요.


	// 프로그래밍관련 대학교를 나오신분들은 
	// 이런말 많이 들어봤을거에요
	// 줄수가 줄어들어야 가독성이 좋다.
	// 줄이 짧아야 수정이 쉽다.

	// 줄수에 많이 집착하는 사람들이 많거든요??

	// 오히려 컨텐츠쪽 코드는
	// 줄수가 많을수록 유지보수가 쉬울때가 많아요.
	// 그리고 줄수가 많다고 느려지지도 않아요. (컨텐츠쪽은)

	// 컨텐츠쪽의 대부분의 부하는
	// 렌더링에서 걸립니다.
}


void Comment4()
{
	//오늘 리소스매니저를 만들거에요.

	// 리소스매니저란 무엇인가?

	// 게임보면 
	// 2D이미지도 있고, 3D 모델링도있고
	// 사운드도 나오져

	// 저친구들의 특징이 있습니다.
	// 용량이 상당히 큽니다.

	// 용량이 상당히 크다는건
	// 솔루션안에 넣기 힘들다는 뜻

	// 용량이 큰 리소스들은 Windows에서 기본으로 제공해주는 리소스 관련 기능으로는 힘듭니다.

	// 결국 리소스는 외부에서 리소스를 로딩해줘야해요.
	// 실제로 exe파일은 100MB 인 반면,
	// 리소스파일은 30GB 이런경우가 많음.

	// 결국 리소스매니저는
	//  - 외부에서 오는 리소스들을 관리해주는 매니저

}

void Comment5()
{
	//map은 
	// BinaryTree의 데이터를 key로 들어가게하고 (wstring)
	// 그안에 실제데이터(ResourceBase*) 가 따로 있다 

	//map의 장점은
	// 검색이 빠르다.
}


void Comment6()
{
	//리소스를 만들건데

	// Texture와 Sprite부터 만들거에요

	// Texture와 Sprite 차이

	// Texture : 이미지
	// Sprite : 이미지

	// Texture는 이미지 원본 
	// Sprite는 Texture의 일부

}