#include "pch.h"


void Comment() 
{
	//1. CenterRect, Vector 이해
	//2. 충돌처리

}


void Comment1()
{
	//1. CenterRect
	// 2d 게임을 제작하다보면 충돌체크를 할일이 되게많습니다.
	// 충돌체크란, A오브젝트와 B오브젝트가 부딪혔는지?? 체크하는겁니다.
	// 슈퍼마리오에서, 마리오가 버섯이랑 충돌되었는지, 몬스터와 충돌되었는지
	
	// 마리오, 버섯 충돌 ==> 마리오가 커짐
	// 마리오, 몬스터 충돌 ==> 죽습니다.

	// 게임컨텐츠 로직에서는 70프로는 충돌로직입니다.

	//이번에 숙제한것도 
	//대부분의 충돌체크로 일어나는 게임

	//숙제를 새롭게하나 줄거에요.
	//벽돌깨기
	
	//충돌을 대체 어떻게하냐??


	// 2d 게임에서는 충돌패턴이 3가지
	// 점, 사각형, 원
	// pt, Rect, Circle

	// 2d에서는 이렇게 5가지 쓰입니다. (보편적으로)
	// PtInRect
	// PtInCircle
	// RectInRect
	// RectInCircle
	// CircleInCircle

}

void Comment2()
{
	//Vector

	// Vector란 무엇이냐
	// C++에서의 자료구조 vector가 아닙닌다.

	// 기하와벡터에서의 벡터입니다.
	// Vector는 점이나 방향정보를 가르키는 변수
	// (x,y) 그리고 3d가면 (x,y,z) 세개가 있습니다.

	// (x, y)라는 변수
	// 위치정보, 방향정보 
	// positionX, positionY
	// directionX, directionY

	// x,y라는 변수를 가지고있기때문에 (위치, 방향)정보를 가르키는 변수가 된것


	// 저희가 내적이랑 외적을 배웁니다. (고등학생때)
	// 내적만 배울거에요

	// 외적은 보통 회전할때 다룹니다. (3d)
	// 외적도 하나 쓰긴써요
	// 무엇보다도, 2d에서는 외적이 없어요.
	// 외적이란 두 Vector사이의 수직 Vector를 구할때 사용합니다.  (모두 방향벡터를 말하는거에요)
	// (2d에서는 z가 없으니까 없겠죠)


	// 내적은 
	// 어떤 미친수학자가 공교롭게도 수식을 하나 발견합니다.
	// A라는 벡터와, B라는 벡터가 있을때
	// A.x * B.x + A.y * B.y = |A| * |B| * cos(theta) 
	// 라는 공식을 발견하게 되어요.

	// Vector 2개를 가지고 있으면 (x, y 값을 알고있다)
	// 벡터 내적의 값 / |A| * |B| = cos(theta)
	// 어? 그럼 뭐지
	// A와 B사이의 각도를 구할수있습니다.
	// theta
	// 프로그램이기때문에 cos없애는거? 일도아닙니다. (함수하나면 없앨수있어요.)
	// 
	// acos(벡터내적값 / |A| * |B|) = 각도 값


	// #### 내적은? ####
	// 각도를 구하기위해서 쓴다.
	// 0~180도가 나오게됨. (설명은 PPT참고)

	// 게임수학은 어쩌피 외우는거에요
	// 수학을 잘하는사람이나,
	// 못하는 사람이나
	// 어쩌피 더빨리외운사람이 더 빨리코드치고
	// 더 잘씁니다.
	// 아무리 수학잘해도
	// 그때그때 생각안나요.
	// 외워야 생각납니다.

	// 내적 = 각도
}

void Comment3()
{
	//반사벡터
	// 벡터가 방향벡터라고 가정했을때,
	// 벽같은거에 부딪히면
	// 꺾여야합니다.

	//벡터의 반사
	/*
	Original Vector
		  ^
		  |
		  /
		 /
		/      Normal
	   /      /
	  +------->
	  \
	   \
		\
		 \  Reflected Vector
		  \
		   V

	*/
	// 이거는 실습한번 해볼게요
	// 저희가 배운거로 충분히
	// Original Vector를 Normal벡터 사용해서 Reflected Vector를 구할수있습니다.
}

void Comment4()
{
	//CenterRect
	//점, Rect, Circle 

	//RECT  => 사용하기 불편하게 되어있는 변수
	// 1. 이동하려면 모든변수를 수정해줘야한다
	// 2. 이동할때, 소수점단위로는 이동할수 없다.
	//   (소수점이 계속합쳐지면 정수단위로 넘어갈수없다)


	//사용하기 편한 사각형 변수
	//CenterRect

	//CenterRect 특징
	//중심점을 Position으로 잡고있습니다.
	//width와 height를 가지고있습니다. (중심점을 기준으로 한)

	// 그러면 앞으로 이동할때, left right top bottom 처럼 모두변경시키는게아니라
	// 중심점 (position)만 이동시키면 전체가 이동한것같은 효과를 볼 수 있다.

	//ToRECT 는 
	//Rect로 만들어진 함수들이 기존에 있어서 사용하는 함수
	//현재 CenterRect 기준으로 RECT 자료형으로 새롭게 만든다.

	// 프로그래밍에서
	// To~~~
	// From~~ 이거는
	// Convert라고하는데
	// A 자료형에서 B자료형으로 옮길때 사용
}

void Comment5()
{
	//inline 키워드는 #define (매크로 한것과 같은 속도를 내기위해서 사용합니다)
	//근데 cpu마음이라 
	//inline을 쓴다고해서
	// 빠르게해줄지말지는 cpu가 알아서 결정합니다.
	//(쓴다고해서 손해는 없음)
	// inline 단점 : 헤더에서만 구현해야함.
}

void Comment6()
{
	//다음숙제
	// 
	//벽돌깨기
	// 수요일날 하루종일 저랑같이 벽돌깨기 풀이할거에요
	// 꼭 해오세요!!


	// 충돌잘하면
	// 나머지는
	// 이미지붙이면 끝입니다.

}