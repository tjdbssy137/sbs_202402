void Summary()
{
	// 두더지 잡기
	//	-> 이 프레임 워크를 사용할 수 있도록 익히기
}

void Comment01()
{
	// 두더지 잡기
	// 1. 어떤 클래스를 만들 것인지 미리 구조 짜기
	//	- 미리 해두어야 나중에 코드 짜다가 크게 안 엇나감 
	//		-> 코드를 말로 바꾸는 힘
	//	- 배경, 두더지, 망치
	
	// 클래스 목록
	// 1. 씬클래스 (MoleGameScene)
	//	- 실제 두더지 잡기에서 일어나는 게임 룰에 관한 내용들
	
	// 2. 두더지클래스 (MoleActor)
	//	- 두더지 (나오기, 들어가기, 죽기)

	// 클래스를 나눌수록 협업하기에 좋다.
	// ==> 유지보수에 좋다.
	// 다만, 작업하기에는 어렵다.
	

	// 클래스를 안 나눌 수록
	// 혼자 작업하기 편하다 => 생산성이 좋다.
	// 하지만 유지보수가 


}

void Comment02()
{
	//이미지가 있는게임을 만들때는 
	// 저같은 경우에는 이미지 작업을 먼저합니다.


	//Texture, Sprite
	// 왠만하면
	// 텍스처에 다담아두는게 좋습니다.


	// 최적화는 
	// 리소스에서 줄이는게 항상 더 효율적이다.

	// 메모리 개념
	// 이미지를 로딩할때,
	// 컴퓨터는 2의 승수배로 로딩하게 된다.
	// (texture크기가 50 x 50) 이거면
	// 이거대로 못읽어요 
	// 2 4 8 16 32 64
	// ==> 64 x 64 로 읽게됩니다.
	// 260 x 260 (512 x 512)
	// => 2 4 8 16 32 64 128 256 512

	// 가로길이 2049 이미지
	// 2 4 8 16 32 64 128 256 512 1024 2048
	// 4096 x 4096
	// 으로 읽게됨


	// 아니 선생님
	// 저희 이미지 하나로 쓰는게 메모리 절약할떄 좋다고하시지 않았나요?
	// 왜 해머따로, 두더지따로 하나요??

	// 사실 합치는게 좋긴합니다. ( 편의 )
	// 한장면에 로딩될때, 같은 텍스처에 있으면 절약
	// 만약에 같이 없는데 같은 텍스처에 있으면 낭비
}