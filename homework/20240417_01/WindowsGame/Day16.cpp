#include "framework.h"
#include "WindowsGame.h"

//이름 별칭문법 typedef
//typedef A B
//A를 B라고도 칭한다
typedef int 인트;

//HINSTANCE (인스턴스 핸들)
// HINSTANCE : 인스턴스 자료구조
// 인스턴스란?
//    작업관리자 켰을때 나오는 거.

//ATOM
// ATOM : unsigned short

//BOOL
// BOOL : int

//LRESULT
// LRESULT : __int64

//HWND (윈도우 핸들)
// HWND : 작업관리자 세부

//UINT
// UINT : unsigned int

//WPARAM 
// WPARAM : unsigned __int64

//LPARAM
// WPARAM : __int64

//LPWSTR
//LPWSTR : wchar_t*

//wchar, char 차이
// char : 멀티바이트
// wchar : 유니코드

//아스키코드
//아스키코드 : 문자를 적으면 => 숫자로 변환해주는 코드 

//아스키코드문제
// : 영어가 아닌 다른 언어는 표시를 할 수가 없습니다.

//멀티바이트 (아스키코드) (정확하진 않습니다.)
// 1바이트로 표현할수있는건 1바이트로 표현하고,
// 안되면 2바이트 넘게 쓰지 뭐.. 
// 
// 
//유니코드 (2바이트) (UTF-16)
// 모든문자를 같은 바이트로 표기할수있게하자. (최소2바이트)
// Visual Studio 기준, UTF-16이라는 것을 사용.
// 

// 원래는 다른언어를 표기를 못했었어요.
// 그래서 멀티바이트 밖에 없었습니다. (정확히는 아스키코드밖에..)
// 아스키코드의 개념이 확장되면서, 
// 1바이트가 아닌, 여러바이트(멀티바이트)로 문자열을 표기할수있게하자.
// 멀티바이트로 만들어진 프로그램이 되게 많아지겠죠.. (UTF-8) 

// 유니코드는 그럼 왜생겼냐??
// 멀티바이트로하니까, 서버통신이나 이런부분들이
// 어느나라에서는 한글로읽어야하고, 어느나라에서는 중국어가되고
// 궭뷁 << 이런거 본적 있지않으세요??
// 이게 멀티바이트를 여러가지로 변환하다보니 생긴문제
// 유니코드 << 이거로 모든 문자를 아스키코드처럼 정해두자.
// 세계표준으로 나온 코드들입니다.
// 누가정하냐??
// 정하는사람이 없어서 되게 많아요 유니코드 종류가
// [UTF-16, UTF-32, CP949] 등등 
// 외울거는 저거 위에 세개만 외우면됩니다.



//C 같은경우에는 함수하나당 return값 한개밖에 못받습니다.
//함수에 매게변수로 리턴을 받을수있는 매게변수를 따로 주는형식으로 채택했습니다.
//그리고 Return값을 함수의 성공유무로 많이 사용해요.

// _In_     => 이 매게변수가 주입만하고, 리턴값으로는 사용 안한다.
// _Out_    => 이 매게변수가 리턴값으로는 사용 한다.
// _In_Opt_ => 이 매게변수가 필수사항은 아니다. 일단 주입될수있게끔은 구상해준거다.
// _In_Out_ => 이 매게변수가 주입도하고, 리턴값으로도 사용 한다.

//
//#include <string>
//using namespace std;
//
//void Day16()
//{
//    인트 a = 0;
//
//    char c = 'a';
//
//    //printf("%d\n", c);
//    //97이 출력
//
//
//    //멀티바이트
//    string myStr = "my string";
//    
//    //유니코드
//    wstring myWString = L"My String";
//    wchar_t myWChar[128] = L"asdf";
//   
//    //멀티바이트와 유니코드를 둘다 지원하기 위해서 만들어진 문자 자료형
//    TCHAR tChar[128];
//
//    // L을 안적고 _T를 적었습니다.
//    //_T는 속성이 멀티바이트로 되어있으면 멀티바이트로 적용하고
//    // 유니코드로 되어있으면 유니코드로 적용한다.
//    wstring myWString = _T("My String");
//
//    // 우리 프로젝트는 최대한 _T를 사용하되, 기본적으로 유니코드를 사용
//}

