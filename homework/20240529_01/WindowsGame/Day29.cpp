#include "pch.h"


void Comment1()
{
	/*
	1~3개월
	  - 기본문법
	  - 프로그래밍적 사고 방법 ( 수도코드 )
	  - 게임 기초

	4~6개월
	  - 게임 만들기 (4개월차) (1달 동안 게임하나 만들거에요.)
	  - 웹 서버 만들기 (5개월차)
		- C#을 배웁니다. (새로운 언어)
		- 깊게는 안해요!! (깊게하려면 2달은 잡아야합니다.)

	  - 6개월차때
		- 게임소켓서버를 배울지
		- Direct X 배울지
		- 포트폴리오 만들시간을 드릴지
		- 코딩테스트를할지
	*/


	//코딩테스트 공부법
	// 코딩테스트 형식

	// 수도코드 짜고
    // 수도코드를 내가 원하는 문법으로 바꾸는게 (C++)

	// 코딩테스트

	// 코딩테스트 공부
	// 수도코드를 코드로 바꾸는거 
	// 이거는 훈련을 해야합니다.


	// 어? 이문제 어떻게 풀지?
	// 공부안하면 현업 10년차, 20년차도 손도 못대요.

	// 대학수능
	// 수학문제 25 ~ 29 문제는
	// 유형 약 150개정도에서 수치만 변경해서 나옵니다.

	// 알고리즘 유형 약 30개 정도에서 지문만 살짝 변경해서 나오는거에요.

	// 알고리즘 유형은 모아둔곳이 되게 많아요.
	// (프로그래머스, 책)
	// 딱한권만 사세요.
	// 그리고 알고리즘을 외우거나, 한번씩 쳐보세요 
	// 코딩테스트공부시점  (취준을 같이함)
	// 10시간공부 기준 : 하루 5시간 (코테) + 5시간(이력서쓰는시간)
	// 이렇게 한달하면 다 배워요.


	//코딩테스트
	// 1. 현업에서 쓸데없다. << 현업도 못풀어요. (공부 오랫동안 안하면)
	// 2. 근데 왜보냐?? <<  이거진짜 성의문제에요
	//		어떤사람은 이걸 공부하는데, 어떤사람은 이걸 공부안한다.
	//		누굴뽑을까?

}

void Comment2()
{
	// 4개월차 중순까지는 프레임워크 완료.
	// 그이후로는 포트폴리오 점검느낌으로 1:1계속 봐드릴게요
	// 이때는 웬만하면 오프라인으로 나와주세요.
}

void Comment3()
{
	// 공격모션하는거는
	// 수도코드 연장선에서 안바뀝니다.

	// 1. 카메라.
	// 2. 충돌체크 마무리 
	//	- (그동안 충돌체크가 BoxCollider 밖에 없습니다. CircleCollider까진 있어야 ..)
	// 3. UI
}


void Comment4()
{
	// 카메라란?

	// 씬을 구성하는 큰 단위
	//  - 1. 카메라
	//  - 2. World

	// 게임에서는 Camera가 되게 중요합니다.
	// 그래서 카메라가 뭐냐?

	// 유저 모니터에 비쳐지는 화면을 어떻게 찍을것인가?


	// 카메라를 연출 방법
	// 2가지 존재.

	// 1. 카메라가 움직이기.
	// 2. 나를 제외한 모든 배경이 움직이기. 
	//    (보통 런게임, 탄막슈팅게임)  

	// 2번은 절대안할것 같죠?
	// 은근히 2번도 많이합니다. 


	// 사실 원리는 똑같아요.
	// - 결국에는 눈속임이다.



	//Component 란?
	// Actor한테 들어가는 기능들
	// CameraComponent 
	//	 액터를 찍는 카메라.
	//   포켓몬스터 (탑뷰) 카메라




	// 카메라 = 눈속임
	// 카메라가 오른쪽으로 이동하면,
	// 모든게 왼쪽으로 이동

	// 내가 그릴좌표 (캐릭터좌표가 아무리 작아져도, 카메라 좌표도 같이 작아집니다. )
	// pos - cameraPos  >> 이게 현재 내 창에서 보일 창의 좌표
}


void Comment5()
{
	// 개발도중 문제가 생겼을때 값을 확인하는 방법

	// 1. 로그찍기
	//   - 라이브도중일때.
	//   - 재현이 안될때  (재현스텝)
	//   - 중간에 멈추면 안될때. (보통 개발자가 알아요.) 
	//    (주로 네트워크 이슈)

	// 2. 디버깅
	//   - 재현이 될때
	//   - 개발중일때.
	//   - 중간에 멈춰도 될때
}

void Comment6()
{
	//  rv = Clamp (a, min, max)
	// a의 값을 min과 max 사이로 제한을 둬서 rv로 리턴해준다.

	// Lerp 게임에서는 되게 많이쓰여요.
	// 만만한 연출 로직

	// rv = Lerp(start, end, percent)
	// start(0) ~ end (1)로 쳤을때 percent의 수치는 몇인지 계산해주는 로직

	// 선형그래프를 쉽게 그릴 수 있습니다.

	// 야매로 짜는거라
}

void Comment6()
{
	//inline 명령어  (빠르다)
	// (외울필요도 없고, 몰라도됩니다. 실제로 모르는사람이 더많을거에요 아마)
	
	// CPU 캐시로 만드는거라
	// 접근속도가 빠릅니다
	// #define 처럼 빨라요.

	// << 어 그러면, 모든애들을 inline으로 만들면 좋지않나요?
	// 제약.
	// 1. 헤더파일에서만 inline을 쓸수있습니다.
	// 2. CPU캐시로 넣는거라, 용량이 다차면 못넣는다.
	//   << 용량은 누가 제어하나? 
	//   << 런타임때. 제어됩니다. (더많이 사용할거 위주로)
}