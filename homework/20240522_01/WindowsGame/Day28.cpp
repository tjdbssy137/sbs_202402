void Comment01()
{
	// 1. Console로 들어가서 부동소수점에 대해 공부
	// 프로그래밍에 대한 상식
	
	// 2. 캐릭터 만들기
	
	// 3. 카메라 만들기
	//		- 현재 카메라는 화면에 고정되어 있다.
}
void Comment02()
{
/*
    // 부동소수점 오차를 잡아주는 범위
    // 프로그래밍에서 float에서 이정도 오차는 같은 수라고 봐주겠다 << 라고 하는 범위.
    #define EPSILON 1e-6f // ( == 0.000001)

    float d = 0.1;
    float  e = 0.2;
    // 이게 안되는 이유.. 면접 때에 설명할 수 있어야 함.
    bool f = d + e == 0.3; // 이게 false라는 것이 핵심

    bool f = abs(0.3 - (d + e)) <= EPSILON;
*/
}

void Comment03()
{
    //Actor 
    //  - 기능만 존재하는 더미
    //  - 화면에 존재하는 객체
    
    // Controller
    //  - 기능을 실행시켜주는 객체
    //  - 화면에는 존재 하지 않음
    
    // Actor -> 생성하면 화면에 나와야 한다.
    // (따로 안 보이게 처리한 게 아니라면)
    
    // 
}

void Comment04()
{
    // Creature은 현재 방향에 따라서
    //  -Flipbook이 변경 도ㅣ어야한다.

    // 방향이 바뀌면, SetFlipbook을 새롭게 해줘야겠다.

    // ChangeDirection
    // -> SetFlipbook을 해준다

    // 원래라면, 기능을 실행하기 위해서
    // Controller 를 만들어야 하지만,
    // 여건에 따라 나중에 만들기도 함. -> Actor에 땜빵코드 작성
    // 땜빵코드 : 일단 구현을 위해서 빠르게 만들고, 나중에 수정할 코드를 말하는 것.
}

void Comment05()
{
    // 플레이어 이동 구현
    // - 지금 이동을 구현하게 되면,
    // - 여태까지 다른 게임들을 만들 떄 이동 구현과 뭐가 다르냐.

    // Flipbook을 변경 시켜서 움직여야 함.
    // 키 입력을 받았을 때
    // -> SetFlipbook() Idle 모션
    
    // 움직이는 상태도 고려해야함
    // SetFlipbook을 해줄 떄, 플레이어의 상태에 따라 Idle, Attack, Move

    // SetFlipbook은 거의 항상 일어나야 함.
    // -> 갑자기 맞았을 수도 있고
    // -> 속도가 갑자기 0이 됐을 수도 있고

    // -> state에 따라서, Flipbook이 세팅 되어야 함
    // _state라는 변수를 만들어서
    // 외부의 기능이 들어오면, 총합적으로 판단하며 stete를 제어해줄 것.
}

void Comment06()
{
    // 상태 패턴

    // 공격을 만든다
    
    // 공격을 만들 때,
    // 이동 중에 공격 가능. 다만, 이동 중에 공격하면 멈춰야 함
    // 이동 중에는 공격할 수 없음.
    // 기획서에 적힌 내용이어도 손바닥 뒤집듯 변경될 수 있음

    // UpdatteAttack
    //UpdateMove
    // UpdateIdle
    //이렇게 상태에 따라 update함수를 나눠두면

    // 공격하다가 우직이는 거
    // 움직이다가 공격하는 거
    // Idle 상태에서 공격하는 거 등등 모두 유연하게 대처 가능


    // 숙제 
    // 몬스터 만들고
    // 내 앞에 몬스터가 있으면
    //      - 내 앞에 무기 충돌체를 잠깐 생성 시킨다
    //      - 무기 충돌체랑 몬스터랑 충돌이 되면
    // 몬스터 삭제
}