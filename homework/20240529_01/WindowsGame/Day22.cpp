#include "pch.h"

void Comment1()
{
	//1. 벽돌깨기 만들기

	//게임 만들기위한 프레임워크
	// - 충돌매니저
	// - Actor라는 객체
	//  - Actor란?
	//	- 씬에 등장하는 최소단위
	//	- 그러면 벽돌깨기에 등장하는 모든 객체는 Actor를 상속받아야한다. (상속받거나 Actor인채로 하거나)

	// - Actor에 Collider라는 컴포넌트를 추가해서
	//	- 충돌매니저에서 알아서 관리되게끔 만들었습니다.

	// 수도코드는 기본중의 기본이고 
	//	(로직짤때)
	// 게임을 만드는거 
	// 프로그램을 만드는거
	//	먼저, 아키텍처를 짜야합니다.

	// 아키텍처란?
	// (간단하게 설명하면)
	//	어떤걸 class로 만들것인가
	//	어떤 class랑 어떤class랑 어떻게 접점을 만들건가?


	// 지금 해야할것.
	// 벽돌깨기에 들어가는 객체를 구상해보기.

	// 1. 어떤 클래스(객체)를 만들어야하는가?
	//	 - 어떤 Actor를 만들어야 하는가? (필수)
	//	 - 어떤 Component를 만들어야 하는가? (필수는 아님)
	//	 - 각 객체별로 어떤 기능을 하게 해줄지.

	// 1. Paddle : Actor
	//	 - Move

	// 2. Ball : Actor
	//	 - Move

	// 3. Brick : Actor
	//	 - BeBroken ( ball과 OnTriggerEnter 되었을때)

	// 4. PlayerController
	//	 - Update (인풋에따라, Paddle 움직일수있게)
	//	 -		  (게임 처음시작할때, 마우스 인풋에 따라 볼 날릴 위치 정할수있게)

	// 5. GameState
	//	 - 게임상태 알려줌
	//	 - 지금 대기상태인지.
	//	 - 플레이 중인지.


	// 나중에 네트워크가 추가하게 되면,
	// Paddle이 여러개가 생길수 있습니다.

	// 아니며 나중에 기획적인 요소로 가만히 있어야하는 패들을 추가하게 되면
	// Paddle이 여러개가 생길수 있습니다.

	// 그 패들은 모두 사용자의 입력으로 이동하지 않아요.
	// 그려면 그런 종류의 패들은 새롭게 만들거나?
	// IF로 그 로직을 막으면 되잖아요.

	// 점점 코드가 더러워져요.

	// SRP (단일책임원칙)
	// 하나의클래스에는 하나의 기능만하게하는것이 좋다.

}

/*
똥피하기 만들기
두더지 잡기 만들기
벽돌깨기 마무리
*/