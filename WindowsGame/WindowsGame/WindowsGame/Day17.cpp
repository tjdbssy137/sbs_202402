void Summary()
{
	// 
	// 2. 디자인 패턴 - 더블 버퍼링
	// 3. 프레임 워크
	//	-> 프레임 워크 부분 때문에 Windows API 수업을 하는 것
}

void Comment1()
{
	// <디자인 패턴 -더블 버퍼링>
	// 더블버퍼링을 안 했을 때의 문제 : 깜빡거림 발생
	// WHY? -> 
	// WindowsAPI는 아무것도 없는 상태에서 (공백의 상태)에서 모든 걸 새로 구현해야함.
	// {InvalidateRect함수 : 전체 화면을 모두 지우고, 다시 그리기.} -> 이 함수 때문에 깜박거림이 발생. 마우스가 움직일 때마다 화면을 다시 그리기 때문.
	// ::InvalidateRect(_hWnd, NULL, true);
	// WM_PAINT << 화면을 그리는 코드
	// 그리는 중인데, 다시 그리라고 명령이 들어옴.
	// -> 그리다가 말고, 그리다가 말고 해서 깜빡!
	// 
	// HOW TO FIX?
	// 디자인 패턴 : 사람들이 문제를 해결하기 위해 만들어낸 프로그램 기법. 수도 코드로 충분히 표현 가능.
	// 유저에게 보이지 않는 화면에 그림을 다 그리고, 보이지 않는 화면을 유저에게 보이는 화면으로 고속 복사한다.
	// 고속 복사가 끝나고 이제 다시 Update, Render을 시작한다.
	// 
	// 1초에 화면이 몇 번 변경될 수 있나? => Frame.
	// 1초에 몇 번 Per Second.
	// Frame Per Second.
	// FPS라고 부름. e.g.) 60fps, 144fps, 240fps, 24fps, 30fps etc
	//
	// 
	// 프레임워크 (Framework)란?
	
	// (게임)엔진 : 프로덕트(게임 상품)를 만들기 위해 만들어진 툴
	//	-> Unity, Unreal Engine
	//	-> 프로그래머말고, 아트랑 기획이 (특정 부분) 사용할 수 있어야 함.
	//	=> 게임 엔진 안에 프레임워크는 내부적으로라도 무조건 포함되어 있다.
	// 
	// 프레임워크 : 프로그램을 잘 만들기 위해 미리 만들어둔 아키텍처 코드 뭉치
	//	-> 아키텍처란, 프로그램 구조!(클래스 설계)
	// 
	// 라이브러리 : 특정 기능만 포함한, 코드 뭉치
	//	-> 카메라 라이브러리, 이미지 프로세싱 라이브러리, 통신 라이브러리 etc
	// 
	// 프레임워크와 라이브러리의 차이
	// 사용하기 위해 내 코드를 프레임워크에 맞추느냐, 라이브러리를 내 코드에 맞추느냐.

	// Windows API를 하는 데 왜 프레임워크를 만들면서 해야하는가?
	// 회사 들어가면 Windows API 절대 안 씀..
	// 근데 왜 배우는가?
	//			-> 엔진에 들어간 기술을 배우기 위해서

	// Windows API를 효과적으로 배우기 위해서는
	// 엔진에서 쓰이는 기술을 그대로 만들 수 있어야함.
	// 그래서 저희가 지금 Windows API하는 과정은 게임 엔진을 만들어보는 과정이랑 아주 흡사.(맛보기 수준)
	// DirectX도 하긴할 건데, 진짜 맛보기 과정이다. 주로 이론 위주.
	// 




	//TimeManager
	// QueryPerformanceFrequency
	// 1초를 초정밀 타이머로 쪼갰을 때 몇 번 쪼갤 수 있는지 반환
	// 


	// <게임회사를 지향하면>
	// 학교, 포트폴리오, 자기소개서 중요

	// <포트폴리오>
	// 이쁘게 잘 원하는 회사랑 비슷한 장르로
	// 자체 엔진을 쓴다 -> Direct X 포폴
	// **유니티 엔진 -> 유니티 게임(캐주얼) + 출시 경험
	// **언리얼 엔진 -> 멋진 거 화려한 거 

}